####Instruccions generals:####
*Executar el Main (make run)
*Introduir 1 per entrar a 'Load Environment File'
*De la llista d'entorns, carregar el que es vulgui probar.
*Introduir 1, per probar a generar l'horari. ('Generate New Schedule')
*Per tornar enrere, i provar un altre entorn, indroduir 0, 0, 1.

##Prova 1##
Objectius: Provar a generar un horari d'un entorn possible realista.  

Carregarem l'arxiu 'Q1+Q2.json'
Aquet entorn conté moltes aules, moltes asignatures, i molts grups, simulant una situació real.

Sortida esperada: Podem observar totes les aules, assignatures, grups, etc. a la interfície, i 
en pode obtenir la seva informació.

##Prova 2##
Objectius: Provar la restricció de CorequisitRestriction.
On dos grups amb el mateix parentCode de dues assignatures correquisites entre elles no poden anar a un mateix dia i hora.

Carregarem l'arxiu 'provaCorequisit.json'
En aquet entorn, tenim un grup 10 de M2, i un grup 10 de PRO1, on PRO1 es corequisit de M2, i per tant, no es podran solapar, tot hi haver-hi dos aules.

Sortida esperada: mateix horari que arxiu provaCorequisit_SCHEDULE.json


##Prova 3##
Objectius: Provar la restricció de SubjectLevel.
On dos grups d'assignatures del mateix nivell no poden anar al mateix dia i hora si tenen el mateix codi i són del mateix tipus.

Carregarem l'arxiu 'provaSubjectLevel.json'
En aquet entorn els dos grups son grups de teoria 10 i del mateix nivell i per tant, no es podran solapar, tot hi haver-hi dos aules.

Sortida esperada: mateix horari que arxiu provaSubjectLevel_SCHEDULE.json

##Prova 4##
Objectius: Provar la restricció de ParentGroupOverlap.
On un subgrup (31, 45...) no pot anar al mateix dia i hora que el seu grup pare (30, 40...).

Carregarem l'arxiu 'provaParentGroupOverlap.json'
En aquet entorn un grup es M2 30, i l'altre M2 33, per tant no es poden solapar.

Sortida esperada: mateix horari que arxiu provaParentGroupOverlap_SCHEDULE.json


##Prova 5##
Objectius: Provar la restricció de LectureFromSameGroupOverlap.
Un grup 

Carregarem l'arxiu 'provaLectureFromSameGroupOverlap.json'
En aquet entorn un grup es M2 30 i no pot anar a dues aules diferents en un mateix dia i hora.

Sortida esperada: mateix horari que arxiu provaLectureFromSameGroupOverlap_SCHEDULE.json

##Prova 6##
Objectius: Provar si es genera o no un horari en condicions que no s'hauria de generar.

Carregarem l'arxiu 'provaNoTime1.json'
En aquet entorn, hi ha un grup de només matins que requereix una classe de 7 hores. Com que el matí nomes te 6 hores, no es troba cap horari valid.

Sortida esperada:
Error. No Valid Schedule Found

##Prova 7##
Objectius: Provar si es genera o no un horari en condicions que no s'hauria de generar.

Carregarem l'arxiu 'provaNoTime2.json'
En aquet entorn, hi ha un grup de només matins que requereix 6 classes de 5 hores. Com que nomes hi ha 5 matins (dill-div), no es troba cap horari valid.

Sortida esperada:
Error. No Valid Schedule Found

##Prova 8##
Objectius: Provar a generar un horari desde un entorn buit (sense aules ni grups).

Carregarem l'arxiu 'provaEmpty.json'
L'horari generat està buit.

##Prova 9##
Carregarem l'arxiu provaSpecificDayOrHour.json
Veurem que importa una restricció negociable de l'environment que fa que la lecture 
no pugui anar al dilluns a les 8:00h. No obstant, si desactivem (relaxem) la restricció
veiem que sí pot anar al Dilluns a les 8:00h. Podem anar activar i desactivant la restricció
o podem eliminar-ne o afegir-ne de noves. Finalment, podem guardar l'environment amb les restriccions
modificades i també l'horari.

##Prova 10##
Objectius: Provar el timeout als 30 segons quan un horari és molt difícil de generar i pot trigar massa.

Carregarem l'arxiu "Q1234.json"
Al generar l'horari, intentarà trobar uan solució durant 30 segons, però al final
pararà el procés al cap de 30 segons en vista que potser triga massa.